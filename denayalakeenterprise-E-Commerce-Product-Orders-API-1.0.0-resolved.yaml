openapi: 3.0.3
info:
  title: E-Commerce Product & Orders API
  description: |
    This API allows e-commerce platforms to manage products and orders securely.
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/denayalakeenterprise/E-Commerce-Product-Orders-API/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.ecommerce.com/v1
  description: Production server
- url: https://sandbox.ecommerce.com/v1
  description: Sandbox server
security:
- BearerAuth: []
paths:
  /products:
    get:
      tags:
      - Products
      summary: Get all products
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
      - Products
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /orders:
    get:
      tags:
      - Orders
      summary: Get all orders
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
      - Orders
      summary: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /orders/{orderId}:
    get:
      tags:
      - Orders
      summary: Get order by ID
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Order found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Product:
      required:
      - name
      - price
      - productId
      type: object
      properties:
        productId:
          type: string
          example: prod_001
        name:
          type: string
          example: Laptop
        price:
          type: number
          format: float
          example: 1200.5
        stock:
          type: integer
          example: 50
    Order:
      required:
      - orderId
      - productId
      - quantity
      - status
      type: object
      properties:
        orderId:
          type: string
          example: order_001
        productId:
          type: string
          example: prod_001
        quantity:
          type: integer
          example: 2
        status:
          type: string
          example: pending
          enum:
          - pending
          - confirmed
          - shipped
          - delivered
          - cancelled
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
